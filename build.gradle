buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
plugins {
    id 'scala'
    id 'maven-publish'
    id 'idea'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

def scala_version = String.valueOf(getProperty("scala_version"))
def forge_version = String.valueOf(getProperty("forge_ver"))
def mc_version = String.valueOf(getProperty("mc_ver"))
def llib_version = String.valueOf(getProperty("llib_version"))
def ccl_version = String.valueOf(getProperty("ccl_ver"))
def jei_version = String.valueOf(getProperty("jei_ver"))
version =  String.valueOf(getProperty("mod_ver"))
group = "cn.academy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AcademyCraft"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

compileJava.options.encoding = "UTF-8"
compileScala.options.encoding = "UTF-8"

minecraft {
    mappings channel: 'snapshot', version: '20180814-1.12'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property "mixin.debug", "true"
            property 'fml.coreMods.load', 'cn.lambdalib2.CorePlugin'

        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property 'fml.coreMods.load', 'cn.lambdalib2.CorePlugin'

        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
    maven {
        // The main host of CraftTweaker related libs
        name = "jared"
        url = "http://maven.blamejared.com"
    }
}

configurations {
    provided
}

// sourceSets.main.compileClasspath += [configurations.provided]

idea {
    module{
        scopes.PROVIDED.plus += [configurations.provided]
    }
}
dependencies {
    minecraft("net.minecraftforge:forge:${mc_version}-${forge_version}")
    // https://mvnrepository.com/artifact/org.scala-lang/scala-library
    compile (group: 'org.scala-lang', name: 'scala-library', version: scala_version)
    compile(group:"cn.lambdalib2", name: "LambdaLib2",version:llib_version)

    compileOnly fg.deobf(group:"codechicken", name:"CodeChickenLib",version:"1.12.2-${ccl_version}",classifier:"universal")
    compileOnly fg.deobf("mezz.jei:jei_1.12.2:${jei_version}:api")
    compileOnly fg.deobf( "cofh:RedstoneFlux:1.12-2.0.0.1:universal")
    compileOnly fg.deobf( "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.9.6")
    compileOnly fg.deobf( "CraftTweaker2:CraftTweaker2-API:4.1.9.6")
    compileOnly fg.deobf( "CraftTweaker2:ZenScript:4.1.9.6")
    compileOnly fg.deobf("net.industrial-craft:industrialcraft-2:2.8.90-ex112")
    //compileOnly fg.deobf(group:"net.industrial-craft",name:"industrialcraft-2",version:"2.8.90-ex112")

}

//sourceSets.main.compileClasspath += [configurations.provided]

sourceSets.main {
    java.srcDirs = []
    scala.srcDirs = [file('build/tempSourcesJava'), file('src/main/scala')]
}

idea {
    module{
        scopes.PROVIDED.plus += [configurations.provided]
        sourceDirs = [file('src/main/java'), file('src/main/scala')]
        resourceDirs = [file('src/main/resources')]
    }
}

processResources {
    // copy everything else except the mcmod.info
    project.logger.info(String.valueOf(sourceSets.main.resources.srcDirs))
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
    }
}

compileJava.options.encoding = "UTF-8"
compileScala.options.encoding = "UTF-8"

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.scala.srcDirs
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Lambda Innovation",
                "Specification-Version"   : 1, // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Lambda Innovation",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}



import org.apache.tools.ant.filters.ReplaceTokens

// see: https://stackoverflow.com/questions/30038540/replace-token-in-file-before-building-but-keep-token-in-sources
// Currently scala compilation task doesn't respect minecraft.replace options. We have to manually replace the tokens by ourselves.
// That also mean currently minecraft { replace ... } are all useless, but they are kept for future reference.
task mySourcesJava(type: Copy) {
    from 'src/main/java'
    into 'build/tempSourcesJava'
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: [VERSION: version])
    filter(ReplaceTokens, tokens: [LAMBDA_LIB_VERSION: "[" + llib_version + "]"])
    filter(ReplaceTokens, tokens: [MC_VERSION: "1.12.2"])
}

compileScala.dependsOn mySourcesJava

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "file:///$buildDir/libs"
        }
    }
}

